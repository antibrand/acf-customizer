!function(e){if("function"==typeof define&&define.amd)define(["jquery"],e);else if("object"==typeof exports){var n=require("jquery");module.exports=e(n)}else e(window.jQuery||window.Zepto||window.$)}(function(f){"use strict";f.fn.serializeJSON=function(e){var r,s,t,n,a,i,u,l,o,p,c,d;return r=f.serializeJSON,s=this,t=r.setupOpts(e),n=s.serializeArray(),r.readCheckboxUncheckedValues(n,t,s),a={},f.each(n,function(e,n){i=n.name,u=n.value,o=r.extractTypeAndNameWithNoType(i),p=o.nameWithNoType,(c=o.type)||(c=r.attrFromInputWithName(s,i,"data-value-type")),r.validateType(i,c,t),"skip"!==c&&(d=r.splitInputNameIntoKeysArray(p),l=r.parseValue(u,i,c,t),!l&&r.shouldSkipFalsy(s,i,p,c,t)||r.deepSet(a,d,l,t))}),a},f.serializeJSON={defaultOptions:{checkboxUncheckedValue:void 0,parseNumbers:!1,parseBooleans:!1,parseNulls:!1,parseAll:!1,parseWithFunction:null,skipFalsyValuesForTypes:[],skipFalsyValuesForFields:[],customTypes:{},defaultTypes:{string:function(e){return String(e)},number:function(e){return Number(e)},boolean:function(e){return-1===["false","null","undefined","","0"].indexOf(e)},null:function(e){return-1===["false","null","undefined","","0"].indexOf(e)?e:null},array:function(e){return JSON.parse(e)},object:function(e){return JSON.parse(e)},auto:function(e){return f.serializeJSON.parseValue(e,null,null,{parseNumbers:!0,parseBooleans:!0,parseNulls:!0})},skip:null},useIntKeysAsArrayIndex:!1},setupOpts:function(n){var e,r,s,t,a,i;for(e in i=f.serializeJSON,null==n&&(n={}),s=i.defaultOptions||{},r=["checkboxUncheckedValue","parseNumbers","parseBooleans","parseNulls","parseAll","parseWithFunction","skipFalsyValuesForTypes","skipFalsyValuesForFields","customTypes","defaultTypes","useIntKeysAsArrayIndex"],n)if(-1===r.indexOf(e))throw new Error("serializeJSON ERROR: invalid option '"+e+"'. Please use one of "+r.join(", "));return a=(t=function(e){return!1!==n[e]&&""!==n[e]&&(n[e]||s[e])})("parseAll"),{checkboxUncheckedValue:t("checkboxUncheckedValue"),parseNumbers:a||t("parseNumbers"),parseBooleans:a||t("parseBooleans"),parseNulls:a||t("parseNulls"),parseWithFunction:t("parseWithFunction"),skipFalsyValuesForTypes:t("skipFalsyValuesForTypes"),skipFalsyValuesForFields:t("skipFalsyValuesForFields"),typeFunctions:f.extend({},t("defaultTypes"),t("customTypes")),useIntKeysAsArrayIndex:t("useIntKeysAsArrayIndex")}},parseValue:function(e,n,r,s){var t,a;return t=f.serializeJSON,a=e,s.typeFunctions&&r&&s.typeFunctions[r]?a=s.typeFunctions[r](e):s.parseNumbers&&t.isNumeric(e)?a=Number(e):!s.parseBooleans||"true"!==e&&"false"!==e?s.parseNulls&&"null"==e&&(a=null):a="true"===e,s.parseWithFunction&&!r&&(a=s.parseWithFunction(a,n)),a},isObject:function(e){return e===Object(e)},isUndefined:function(e){return void 0===e},isValidArrayIndex:function(e){return/^[0-9]+$/.test(String(e))},isNumeric:function(e){return 0<=e-parseFloat(e)},optionKeys:function(e){if(Object.keys)return Object.keys(e);var n,r=[];for(n in e)r.push(n);return r},readCheckboxUncheckedValues:function(r,s,e){var n,t,a;null==s&&(s={}),f.serializeJSON,n="input[type=checkbox][name]:not(:checked):not([disabled])",e.find(n).add(e.filter(n)).each(function(e,n){if(t=f(n),null==(a=t.attr("data-unchecked-value"))&&(a=s.checkboxUncheckedValue),null!=a){if(n.name&&-1!==n.name.indexOf("[]["))throw new Error("serializeJSON ERROR: checkbox unchecked values are not supported on nested arrays of objects like '"+n.name+"'. See https://github.com/marioizquierdo/jquery.serializeJSON/issues/67");r.push({name:n.name,value:a})}})},extractTypeAndNameWithNoType:function(e){var n;return(n=e.match(/(.*):([^:]+)$/))?{nameWithNoType:n[1],type:n[2]}:{nameWithNoType:e,type:null}},shouldSkipFalsy:function(e,n,r,s,t){var a=f.serializeJSON.attrFromInputWithName(e,n,"data-skip-falsy");if(null!=a)return"false"!==a;var i=t.skipFalsyValuesForFields;if(i&&(-1!==i.indexOf(r)||-1!==i.indexOf(n)))return!0;var u=t.skipFalsyValuesForTypes;return null==s&&(s="string"),!(!u||-1===u.indexOf(s))},attrFromInputWithName:function(e,n,r){var s;return s='[name="'+n.replace(/(:|\.|\[|\]|\s)/g,"\\$1")+'"]',e.find(s).add(e.filter(s)).attr(r)},validateType:function(e,n,r){var s,t;if(s=(t=f.serializeJSON).optionKeys(r?r.typeFunctions:t.defaultOptions.defaultTypes),n&&-1===s.indexOf(n))throw new Error("serializeJSON ERROR: Invalid type "+n+" found in input name '"+e+"', please use one of "+s.join(", "));return!0},splitInputNameIntoKeysArray:function(e){var n;return f.serializeJSON,n=e.split("["),""===(n=f.map(n,function(e){return e.replace(/\]/g,"")}))[0]&&n.shift(),n},deepSet:function(e,n,r,s){var t,a,i,u,l,o;if(null==s&&(s={}),(o=f.serializeJSON).isUndefined(e))throw new Error("ArgumentError: param 'o' expected to be an object or array, found undefined");if(!n||0===n.length)throw new Error("ArgumentError: param 'keys' expected to be an array with least one element");t=n[0],1===n.length?""===t?e.push(r):e[t]=r:(a=n[1],""===t&&(l=e[u=e.length-1],t=o.isObject(l)&&(o.isUndefined(l[a])||2<n.length)?u:u+1),""===a?!o.isUndefined(e[t])&&f.isArray(e[t])||(e[t]=[]):s.useIntKeysAsArrayIndex&&o.isValidArrayIndex(a)?!o.isUndefined(e[t])&&f.isArray(e[t])||(e[t]=[]):!o.isUndefined(e[t])&&o.isObject(e[t])||(e[t]={}),i=n.slice(1),o.deepSet(e[t],i,r,s))}}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
