!function a(r,c,f){function s(t,e){if(!c[t]){if(!r[t]){var n="function"==typeof require&&require;if(!e&&n)return n(t,!0);if(u)return u(t,!0);var i=new Error("Cannot find module '"+t+"'");throw i.code="MODULE_NOT_FOUND",i}var o=c[t]={exports:{}};r[t][0].call(o.exports,function(e){return s(r[t][1][e]||e)},o,o.exports,a,r,c,f)}return c[t].exports}for(var u="function"==typeof require&&require,e=0;e<f.length;e++)s(f[e]);return s}({1:[function(e,t,n){"use strict";var i,o,a,r,c,f;i=wp.customize,o=jQuery,a=acf_fieldgroup_control,f=[],i.AcfFieldGroupControl=i.Control.extend({preview_context:{type:null,id:null},initialize:function(e,t){var n;n=t||{},i.Control.prototype.initialize.call(this,e,n)},set_preview_context:function(e){return this.preview_context=e,this},ready:function(){var n=this;this.setting(),0<=["post","term","user"].indexOf(n.params.storage_type)&&i.bind("acf-customize-context-changed",function(e){e.type===n.params.storage_type?n.set_preview_context(e).load_form():n.unload_form()}),this.$wrapper=n.container.find(".acf-fields").first(),acf.do_action("append",n.container),n.load_form(),n.container.on("change",".acf-field",function(e){var t=n.container.find(".acf-field :input[name]");acf.validation.errors=[],t.each(function(){this.checkValidity()}),acf.validation.busy=!1,o((r=n).container).data("acf",null),acf.validation.fetch({form:n.container,lock:!1,success:function(e){},complete:function(e){acf.unlockForm(e),setTimeout(function(){n.setting.preview()},100)}})}),i.Control.prototype.ready.apply(n,arguments)},load_form:function(){var e,t=this;(function(e,t){var n={idx:f.length,request:e,done:t,finished:!1,scope:null,arguments:null};f.push(n),e.done(function(){var e;for(n.finished=!0,n.self=this,n.arguments=arguments;f.length&&f[0].finished;)(e=f.shift()).done.apply(e.self,e.arguments)})})(e=wp.ajax.send("load_customizer_field_groups_"+t.id,{data:{wp_customize:"on",section_id:t.id,acf_customize_context:JSON.stringify(t.preview_context),_nonce:a.load_field_group_nonce}}),function(e){t.$wrapper.html(e.html),t.init_fields()}),e.fail(function(e){console.log(" - load field group failure")}),e.always(function(){e=null})},unload_form:function(){this.$wrapper.html("")},init_fields:function(){var e=this;e.$fields=e.container.find(".acf-fields > .acf-field"),setTimeout(function(){acf.doAction("ready",e.$wrapper),acf.doAction("prepare")},1)},updateValues:function(){var e,t=this.container.find(".acf-field :input");t.each(function(){var e=o(this).attr("name");e&&(o(this).data("prev-name",e),o(this).attr("name",e.replace(/\[([0-9]+)\]/g,"[_$1]")))}),e=t.serializeJSON({useIntKeysAsArrayIndex:!1}),t.each(function(){o(this).attr("name",o(this).data("prev-name")),o(this).data("prev-name",null)}),this.setting._value.___acf_customizer_dirty=!0,this.setting.set(function n(i){return o.isPlainObject(i)&&(Object.keys(i).join("").match(/^([0-9_]+)$/)&&(i=Object.values(i)),o.each(i,function(e,t){i[e]=n(t)})),i}(e[this.id]))},focusField:function(e){for(var t,n=this.$wrapper,i=[];e.length;)if(t=e.pop(),(n=_.isNumber(t)?n.is('[data-type="flexible_content"]')?n.find("> .acf-input > .acf-flexible-content > .values").children(":not(.acf-clone)").eq(t):!!n.is('[data-type="repeater"]')&&(console.log(n.find("> .acf-input > .acf-repeater > .acf-table > tbody")),n.find("> .acf-input > .acf-repeater > .acf-table > tbody").children(":not(.acf-clone)").eq(t)):n.find('[data-key="'+t+'"]'))&&n.is("[data-id]")&&i.push(n),!n.length)return!1;return this.focus(),setTimeout(function(){i.length&&function(e){e.forEach(function(e){var t=acf.getField(e.closest(".acf-field"));e.siblings().not(e).each(function(){"repeater"===t.type?t.collapse(o(this)):"flexible_content"===t.type&&t.closeLayout(o(this))}),"repeater"===t.type?t.expand(e):"flexible_content"===t.type&&t.openLayout(e)})}(i),_.isNumber(t)?n.attr("tabindex",1).focus():n.find("input").focus()},500),!0}}),acf.add_action("validation_success",function(e){r.updateValues()}),acf.add_action("validation_failure",function(e){r.container.find("> .acf-error-message").remove()}),acf.add_action("invalid",function(e){acf.validation.busy=!0}),i.bind("ready",function(){i.previewer.bind("acf-customize-context",function(e){var t;t=c,JSON.stringify(e)!=JSON.stringify(t)&&i.trigger("acf-customize-context-changed",e),c=e}),i.previewer.bind("focus-control-for-setting",function(e){}),i.previewer.bind("acf-focus",function(t){var n=t.pop();i.control.each(function(e){if(e.constructor===i.AcfFieldGroupControl)if(_.isNumber(n)){if(e.preview_context&&e.preview_context.id===n&&e.focusField(t))return}else if(e.id===n&&e.focusField(t))return})})}),i.bind("save-request-params",function(e){_.extend(e,{acf_customize_context:JSON.stringify(c)})}),i.controlConstructor.acf_customizer=i.AcfFieldGroupControl,i.bind("changeset-error",function(){})},{}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFkbWluL25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJhZG1pbi9zcmMvanMvYWRtaW4vY3VzdG9taXplLWFjZi1maWVsZGdyb3VwLWNvbnRyb2wvaW5kZXguanMiXSwibmFtZXMiOlsiciIsImUiLCJuIiwidCIsIm8iLCJpIiwiZiIsImMiLCJyZXF1aXJlIiwidSIsImEiLCJFcnJvciIsImNvZGUiLCJwIiwiZXhwb3J0cyIsImNhbGwiLCJsZW5ndGgiLCIxIiwibW9kdWxlIiwiYXBpIiwiJCIsIm9wdGlvbnMiLCJjdXJyZW50X2NvbnRyb2wiLCJhY2ZfY3VzdG9taXplX2NvbnRleHQiLCJxdWV1ZSIsIndwIiwiY3VzdG9taXplIiwialF1ZXJ5IiwiYWNmX2ZpZWxkZ3JvdXBfY29udHJvbCIsIkFjZkZpZWxkR3JvdXBDb250cm9sIiwiQ29udHJvbCIsImV4dGVuZCIsInByZXZpZXdfY29udGV4dCIsInR5cGUiLCJpZCIsImluaXRpYWxpemUiLCJvcHQiLCJhcmdzIiwicHJvdG90eXBlIiwidGhpcyIsInNldF9wcmV2aWV3X2NvbnRleHQiLCJjb250ZXh0IiwicmVhZHkiLCJjb250cm9sIiwic2V0dGluZyIsImluZGV4T2YiLCJwYXJhbXMiLCJzdG9yYWdlX3R5cGUiLCJiaW5kIiwibG9hZF9mb3JtIiwidW5sb2FkX2Zvcm0iLCIkd3JhcHBlciIsImNvbnRhaW5lciIsImZpbmQiLCJmaXJzdCIsImFjZiIsImRvX2FjdGlvbiIsIm9uIiwiJGlucHV0cyIsInZhbGlkYXRpb24iLCJlcnJvcnMiLCJlYWNoIiwiY2hlY2tWYWxpZGl0eSIsImJ1c3kiLCJkYXRhIiwiZmV0Y2giLCJmb3JtIiwibG9jayIsInN1Y2Nlc3MiLCIkZm9ybSIsImNvbXBsZXRlIiwidW5sb2NrRm9ybSIsInNldFRpbWVvdXQiLCJwcmV2aWV3IiwiYXBwbHkiLCJhcmd1bWVudHMiLCJyZXF1ZXN0IiwiZG9uZSIsIml0ZW0iLCJpZHgiLCJmaW5pc2hlZCIsInNjb3BlIiwicHVzaCIsIml0Iiwic2VsZiIsInNoaWZ0IiwiZW5xdWV1ZSIsImFqYXgiLCJzZW5kIiwid3BfY3VzdG9taXplIiwic2VjdGlvbl9pZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJfbm9uY2UiLCJsb2FkX2ZpZWxkX2dyb3VwX25vbmNlIiwicmVzcG9uc2UiLCJodG1sIiwiaW5pdF9maWVsZHMiLCJmYWlsIiwiY29uc29sZSIsImxvZyIsImFsd2F5cyIsIiRmaWVsZHMiLCJkb0FjdGlvbiIsInVwZGF0ZVZhbHVlcyIsInZhbHVlIiwibmFtZSIsImF0dHIiLCJyZXBsYWNlIiwic2VyaWFsaXplSlNPTiIsInVzZUludEtleXNBc0FycmF5SW5kZXgiLCJfdmFsdWUiLCJfX19hY2ZfY3VzdG9taXplcl9kaXJ0eSIsInNldCIsImZpeE51bUtleXMiLCJvYmoiLCJpc1BsYWluT2JqZWN0IiwiT2JqZWN0Iiwia2V5cyIsImpvaW4iLCJtYXRjaCIsInZhbHVlcyIsImVsIiwiZm9jdXNGaWVsZCIsInBhdGgiLCJjdXJyZW50IiwiJGZvY3VzRWwiLCJleHBhbmQiLCJwb3AiLCJfIiwiaXNOdW1iZXIiLCJpcyIsImNoaWxkcmVuIiwiZXEiLCJmb2N1cyIsImZvckVhY2giLCIkcm93IiwiZmllbGQiLCJnZXRGaWVsZCIsImNsb3Nlc3QiLCJzaWJsaW5ncyIsIm5vdCIsImNvbGxhcHNlIiwiY2xvc2VMYXlvdXQiLCJvcGVuTGF5b3V0IiwiZXhwYW5kUmVwZWF0YWJsZXMiLCJhZGRfYWN0aW9uIiwicmVtb3ZlIiwiJGlucHV0IiwicHJldmlld2VyIiwibmV3X3ZhbCIsInByZXZfdmFsIiwidHJpZ2dlciIsInNldHRpbmdJZCIsInBvc3RfaWQiLCJjb25zdHJ1Y3RvciIsInF1ZXJ5IiwiY29udHJvbENvbnN0cnVjdG9yIl0sIm1hcHBpbmdzIjoiQ0FBQSxTQUFBQSxFQUFBQyxFQUFBQyxFQUFBQyxHQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEdBQUEsSUFBQUosRUFBQUcsR0FBQSxDQUFBLElBQUFKLEVBQUFJLEdBQUEsQ0FB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LE9BQVE2SCxFQUFPLENBQUNySSxzQkFBMEJvRSxLQUFLQyxVQUFXckUsT0FJNURKLEVBQUkwSSxtQkFBSixlQUEyQzFJLEVBQUlVLHFCQUVoRFYsRUFBSTZCLEtBQUssa0JBQW1CIiwiZmlsZSI6ImFkbWluL2N1c3RvbWl6ZS1hY2YtZmllbGRncm91cC1jb250cm9sLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsIlxuKGZ1bmN0aW9uKCBhcGksICQsIG9wdGlvbnMgKSB7XG5cblx0Ly8gc3RvcmUgZm9yIGFjZidzIHN0YXRpYyB2YWxpZGF0aW9uIGNhbGxiYWNrc1xuXHR2YXIgY3VycmVudF9jb250cm9sLFxuXHRcdGFjZl9jdXN0b21pemVfY29udGV4dCxcblx0XHRxdWV1ZSA9IFtdO1xuXG5cdC8vIHZhciBfaXNFcXVhbCA9IF8uaXNFcXVhbCxcblx0Ly8gXHRpc0VxdWFsUGF0Y2ggPSBmdW5jdGlvbihvYmplY3Qsb3RoZXIpIHtcblx0Ly8gXHRpZiAoIF8uaXNPYmplY3Qob2JqZWN0KSAmJiBfLmlzT2JqZWN0KG90aGVyKSAmJiAhIF9pc0VxdWFsKCBPYmplY3Qua2V5cyhvYmplY3QpLCBPYmplY3Qua2V5cyhvdGhlcikgKSApIHtcblx0Ly8gXHRcdHJldHVybiBmYWxzZTtcblx0Ly8gXHR9XG5cdC8vIFx0cmV0dXJuIF9pc0VxdWFsKG9iamVjdCxvdGhlcik7XG5cdC8vIH1cblxuXHQvLyBtYWtlIHN1cmUgZmllbGRzIGdldCBpbml0ZWQgaW4gdGhlIG9yZGVyIHRoZXkgYXBwZWFyIGluIHRoZSBkb21cblx0ZnVuY3Rpb24gZW5xdWV1ZShyZXF1ZXN0LGRvbmUpIHtcblx0XHR2YXIgaWR4ID0gcXVldWUubGVuZ3RoLFxuXHRcdFx0aXRlbSA9IHsgaWR4OmlkeCwgcmVxdWVzdDpyZXF1ZXN0LCBkb25lOiBkb25lLCBmaW5pc2hlZDpmYWxzZSwgc2NvcGU6bnVsbCwgYXJndW1lbnRzOm51bGwgfTtcblxuXHRcdHF1ZXVlLnB1c2goIGl0ZW0gKTtcblxuXHRcdHJlcXVlc3QuZG9uZSggZnVuY3Rpb24oKXtcblx0XHRcdHZhciBpdDtcblx0XHRcdGl0ZW0uZmluaXNoZWQgPSB0cnVlO1xuXHRcdFx0aXRlbS5zZWxmID0gdGhpcztcblx0XHRcdGl0ZW0uYXJndW1lbnRzID0gYXJndW1lbnRzO1xuXHRcdFx0d2hpbGUgKCBxdWV1ZS5sZW5ndGggJiYgcXVldWVbMF0uZmluaXNoZWQgKSB7XG5cdFx0XHRcdGl0ID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdFx0aXQuZG9uZS5hcHBseSggaXQuc2VsZiwgaXQuYXJndW1lbnRzICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG5cblxuXHRmdW5jdGlvbiBleHBhbmRSZXBlYXRhYmxlcyggZXhwYW5kICkge1xuXHRcdHJldHVybiBleHBhbmQuZm9yRWFjaChmdW5jdGlvbigkcm93KXtcblx0XHRcdHZhciBmaWVsZCA9IGFjZi5nZXRGaWVsZCggJHJvdy5jbG9zZXN0KCcuYWNmLWZpZWxkJykgKTtcblx0XHRcdC8vIGNvbGxhcHNlIG90aGVyc1xuXHRcdFx0JHJvdy5zaWJsaW5ncygpLm5vdCgkcm93KS5lYWNoKGZ1bmN0aW9uKCl7XG5cdFx0XHRcdGlmICggZmllbGQudHlwZSA9PT0gJ3JlcGVhdGVyJyApIHtcblx0XHRcdFx0XHRmaWVsZC5jb2xsYXBzZSgkKHRoaXMpKTtcblx0XHRcdFx0fSBlbHNlIGlmICggZmllbGQudHlwZSA9PT0gJ2ZsZXhpYmxlX2NvbnRlbnQnICkge1xuXHRcdFx0XHRcdGZpZWxkLmNsb3NlTGF5b3V0KCQodGhpcykpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0aWYgKCBmaWVsZC50eXBlID09PSAncmVwZWF0ZXInICkge1xuXHRcdFx0XHRmaWVsZC5leHBhbmQoJHJvdyk7XG5cdFx0XHR9IGVsc2UgaWYgKCBmaWVsZC50eXBlID09PSAnZmxleGlibGVfY29udGVudCcgKSB7XG5cdFx0XHRcdGZpZWxkLm9wZW5MYXlvdXQoJHJvdyk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0fVxuXG5cblx0YXBpLkFjZkZpZWxkR3JvdXBDb250cm9sID0gYXBpLkNvbnRyb2wuZXh0ZW5kKHtcblx0XHRwcmV2aWV3X2NvbnRleHQ6IHtcblx0XHRcdHR5cGU6IG51bGwsXG5cdFx0XHRpZDogbnVsbCxcblx0XHR9LFxuXHRcdGluaXRpYWxpemU6IGZ1bmN0aW9uKCBpZCwgb3B0ICkge1xuXHRcdFx0dmFyIGNvbnRyb2wgPSB0aGlzLCBhcmdzO1xuXG4gICAgICAgICAgICBhcmdzID0gb3B0IHx8IHt9O1xuXG5cdFx0XHRhcGkuQ29udHJvbC5wcm90b3R5cGUuaW5pdGlhbGl6ZS5jYWxsKCBjb250cm9sLCBpZCwgYXJncyApO1xuXG5cdFx0fSxcblx0XHRzZXRfcHJldmlld19jb250ZXh0OiBmdW5jdGlvbihjb250ZXh0KSB7XG5cdFx0XHR0aGlzLnByZXZpZXdfY29udGV4dCA9IGNvbnRleHQ7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9LFxuXHRcdHJlYWR5OiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjb250cm9sID0gdGhpcyxcblx0XHRcdFx0c2V0dGluZ3MgPSB0aGlzLnNldHRpbmcoKTtcblxuXHRcdFx0aWYgKCAwIDw9IFsncG9zdCcsJ3Rlcm0nLCd1c2VyJ10uaW5kZXhPZiggY29udHJvbC5wYXJhbXMuc3RvcmFnZV90eXBlICkgKSB7XG5cdFx0XHRcdC8vIHJlbG9hZCBmaWVsZHMgaWYgcHJldmlldyB1cmwgY2hhbmdlZFxuXHRcdFx0XHRhcGkuYmluZCggJ2FjZi1jdXN0b21pemUtY29udGV4dC1jaGFuZ2VkJywgZnVuY3Rpb24oIGNvbnRleHQgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGNvbnRleHQudHlwZSA9PT0gY29udHJvbC5wYXJhbXMuc3RvcmFnZV90eXBlICkge1xuXHRcdFx0XHRcdFx0Y29udHJvbFxuXHRcdFx0XHRcdFx0XHQuc2V0X3ByZXZpZXdfY29udGV4dCggY29udGV4dCApXG5cdFx0XHRcdFx0XHRcdC5sb2FkX2Zvcm0oKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y29udHJvbC51bmxvYWRfZm9ybSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuJHdyYXBwZXIgPSBjb250cm9sLmNvbnRhaW5lci5maW5kKCcuYWNmLWZpZWxkcycpLmZpcnN0KCk7XG5cdFx0XHRhY2YuZG9fYWN0aW9uKCAnYXBwZW5kJywgY29udHJvbC5jb250YWluZXIgKTtcblxuXHRcdFx0Y29udHJvbC5sb2FkX2Zvcm0oKTtcblxuXHRcdFx0Y29udHJvbC5jb250YWluZXIub24oJ2NoYW5nZScsJy5hY2YtZmllbGQnLCBmdW5jdGlvbihlKXtcblx0XHRcdFx0Ly8qXG5cdFx0XHRcdC8vIGNoZWNrIHZhbGlkXG5cdFx0XHRcdHZhciAkaW5wdXRzID0gY29udHJvbC5jb250YWluZXIuZmluZCgnLmFjZi1maWVsZCA6aW5wdXRbbmFtZV0nKTtcblxuXHRcdFx0XHRhY2YudmFsaWRhdGlvbi5lcnJvcnMgPSBbXTtcblx0XHRcdFx0JGlucHV0cy5lYWNoKGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0dGhpcy5jaGVja1ZhbGlkaXR5KCk7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGFjZi52YWxpZGF0aW9uLmJ1c3kgPSBmYWxzZTtcblx0XHRcdFx0Y3VycmVudF9jb250cm9sID0gY29udHJvbDtcblxuXHRcdFx0XHQvLyByZXNldCB2YWxpZGF0aW9uIHN0YXR1c1xuXHRcdFx0XHQkKCBjb250cm9sLmNvbnRhaW5lciApLmRhdGEoJ2FjZicsbnVsbCk7XG5cblx0XHRcdFx0YWNmLnZhbGlkYXRpb24uZmV0Y2goIHtcblx0XHRcdFx0XHRmb3JtOiBjb250cm9sLmNvbnRhaW5lcixcblx0XHRcdFx0XHRsb2NrOmZhbHNlLFxuXHRcdFx0XHRcdHN1Y2Nlc3M6ZnVuY3Rpb24oJGZvcm0pIHtcblx0XHRcdFx0XHRcdC8vIGFsbG93IGZvciBzdWJtaXRcblx0XHRcdFx0XHRcdC8vIGFjZi52YWxpZGF0aW9uLmlnbm9yZSA9IDE7XG5cdFx0XHRcdFx0XHQvLyAkYnV0dG9uLnRyaWdnZXIoJ2NsaWNrJyk7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRjb21wbGV0ZTpmdW5jdGlvbigkZm9ybSkge1xuXHRcdFx0XHRcdFx0YWNmLnVubG9ja0Zvcm0oICRmb3JtICk7XG5cdFx0XHRcdFx0XHRzZXRUaW1lb3V0KCBmdW5jdGlvbigpeyBjb250cm9sLnNldHRpbmcucHJldmlldygpOyB9LCAxMDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0fSk7XG5cblx0XHRcdGFwaS5Db250cm9sLnByb3RvdHlwZS5yZWFkeS5hcHBseSggY29udHJvbCwgYXJndW1lbnRzICk7XG5cblx0XHR9LFxuXHRcdGxvYWRfZm9ybTogZnVuY3Rpb24oKSB7XG5cblx0XHRcdHZhciBjb250cm9sID0gdGhpcyxcblx0XHRcdFx0cmVxdWVzdDtcblxuXHRcdFx0cmVxdWVzdCA9IHdwLmFqYXguc2VuZCggJ2xvYWRfY3VzdG9taXplcl9maWVsZF9ncm91cHNfJyArIGNvbnRyb2wuaWQsIHtcblx0XHRcdFx0ZGF0YToge1xuXHRcdFx0XHRcdHdwX2N1c3RvbWl6ZVx0XHRcdDogJ29uJyxcblx0XHRcdFx0XHRzZWN0aW9uX2lkXHRcdFx0XHQ6IGNvbnRyb2wuaWQsXG5cdFx0XHRcdFx0YWNmX2N1c3RvbWl6ZV9jb250ZXh0XHQ6IEpTT04uc3RyaW5naWZ5KCBjb250cm9sLnByZXZpZXdfY29udGV4dCApLFxuXHRcdFx0XHRcdF9ub25jZVx0XHRcdFx0XHQ6IG9wdGlvbnMubG9hZF9maWVsZF9ncm91cF9ub25jZSxcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXG5cblx0XHRcdGVucXVldWUoIHJlcXVlc3QsIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG5cblx0XHRcdFx0Y29udHJvbC4kd3JhcHBlci5odG1sKCByZXNwb25zZS5odG1sICk7XG5cblx0XHRcdFx0Y29udHJvbC5pbml0X2ZpZWxkcygpO1xuXG5cdFx0XHR9ICk7XG5cdFx0XHRyZXF1ZXN0LmZhaWwoIGZ1bmN0aW9uKCByZXNwb25zZSApIHtcblx0XHRcdFx0Y29uc29sZS5sb2coJyAtIGxvYWQgZmllbGQgZ3JvdXAgZmFpbHVyZScpXG5cdFx0XHR9ICk7XG5cblx0XHRcdHJlcXVlc3QuYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmVxdWVzdCA9IG51bGw7XG5cdFx0XHR9ICk7XG5cblx0XHR9LFxuXHRcdHVubG9hZF9mb3JtOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjb250cm9sID0gdGhpcztcblxuXHRcdFx0Y29udHJvbC4kd3JhcHBlci5odG1sKCAnJyApO1xuXHRcdH0sXG5cdFx0aW5pdF9maWVsZHM6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR2YXIgY29udHJvbCA9IHRoaXM7XG5cblx0XHRcdGNvbnRyb2wuJGZpZWxkcyA9IGNvbnRyb2wuY29udGFpbmVyLmZpbmQoJy5hY2YtZmllbGRzID4gLmFjZi1maWVsZCcpO1xuXG5cdFx0XHQvLyB3aWxsIGluaXQgZmllbGRzXG5cdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cdFx0XHRcdGFjZi5kb0FjdGlvbigncmVhZHknLCBjb250cm9sLiR3cmFwcGVyKTtcblx0XHRcdFx0YWNmLmRvQWN0aW9uKCdwcmVwYXJlJyk7XG5cdFx0XHR9LDEpO1xuXHRcdH0sXG5cdFx0dXBkYXRlVmFsdWVzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjb250cm9sID0gdGhpcyxcblx0XHRcdFx0JGlucHV0cyA9IGNvbnRyb2wuY29udGFpbmVyLmZpbmQoJy5hY2YtZmllbGQgOmlucHV0JyksXG5cdFx0XHRcdHZhbHVlO1xuXG5cdFx0XHQvLyBjb252ZXJ0IG9iamVjdCB3aXRoIHByZWZpeGVkIG51bWVyaWMga2V5cyB0byBhcnJheVxuXHRcdFx0ZnVuY3Rpb24gZml4TnVtS2V5cyggb2JqICkge1xuXHRcdFx0XHRpZiAoICQuaXNQbGFpbk9iamVjdCggb2JqICkgKSB7XG5cdFx0XHRcdFx0Ly8gY29udmVydCBvYmplY3RzIHdpdGggbnVtZXJpYyBrZXlzIHRvIGFycmF5XG5cdFx0XHRcdFx0aWYgKCBPYmplY3Qua2V5cyggb2JqICkuam9pbignJykubWF0Y2goL14oWzAtOV9dKykkLykgKSB7XG5cdFx0XHRcdFx0XHRvYmogPSBPYmplY3QudmFsdWVzKCBvYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly8gcmVjdXJzZVxuXHRcdFx0XHRcdCQuZWFjaCggb2JqLGZ1bmN0aW9uKCBpLCBlbCApe1xuXHRcdFx0XHRcdFx0b2JqW2ldID0gZml4TnVtS2V5cyggZWwgKTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG9iajtcblx0XHRcdH1cblxuXHRcdFx0Ly8gcHJlZml4IG51bWVyaWMga2V5cyB3aXRoIGBfYFxuXHRcdFx0Ly8gcmVwZWF0ZXIgZmllbGQgbmFtZXMgaGF2ZSBudW1lcmljIGtleXMsIHdoaWNoIGdldCBhdXRvbWF0aWNhbGx5IHNvcnRlZCB1cG9uIHNlcmlhbGl6YXRpb24uXG5cdFx0XHQkaW5wdXRzLmVhY2goZnVuY3Rpb24oKXtcblx0XHRcdFx0dmFyIG5hbWUgPSAkKHRoaXMpLmF0dHIoJ25hbWUnKTtcblxuXHRcdFx0XHRpZiAoICEgbmFtZSApIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0JCh0aGlzKS5kYXRhKCdwcmV2LW5hbWUnLCBuYW1lICk7XG5cdFx0XHRcdCQodGhpcykuYXR0cignbmFtZScsbmFtZS5yZXBsYWNlKCAvXFxbKFswLTldKylcXF0vZywgJ1xcW18kMVxcXScpKTtcblx0XHRcdH0pO1xuXG5cdFx0XHR2YWx1ZSA9ICRpbnB1dHMuc2VyaWFsaXplSlNPTih7XG5cdFx0XHRcdHVzZUludEtleXNBc0FycmF5SW5kZXg6ZmFsc2UsXG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gLi4uIHJlc3RvcmluZyBmaWVsZCBuYW1lcyB0byBwcmV2aW91cyBzdGF0ZVxuXHRcdFx0JGlucHV0cy5lYWNoKGZ1bmN0aW9uKCl7XG5cdFx0XHRcdCQodGhpcykuYXR0ciggJ25hbWUnLCAkKHRoaXMpLmRhdGEoJ3ByZXYtbmFtZScpICk7XG5cdFx0XHRcdCQodGhpcykuZGF0YSgncHJldi1uYW1lJywgbnVsbCApO1xuXHRcdFx0fSk7XG5cblx0XHRcdC8vIGZvcmNlIHZhbHVlIHVwZGF0ZVxuXHRcdFx0Y29udHJvbC5zZXR0aW5nLl92YWx1ZS5fX19hY2ZfY3VzdG9taXplcl9kaXJ0eSA9IHRydWU7XG5cdFx0XHQvLyB1cGRhdGUgY3VzdG9taXplciB2YWx1ZVxuXHRcdFx0Y29udHJvbC5zZXR0aW5nLnNldCggZml4TnVtS2V5cyggdmFsdWVbdGhpcy5pZCBdICkgKTtcblxuXHRcdH0sXG5cdFx0Zm9jdXNGaWVsZDpmdW5jdGlvbiggcGF0aCApIHtcblx0XHRcdHZhciBjdXJyZW50LCBzZWxlY3RvciwgJGZvY3VzRWwgPSB0aGlzLiR3cmFwcGVyLCBleHBhbmQgPSBbXTtcblxuXHRcdFx0d2hpbGUgKCBwYXRoLmxlbmd0aCApIHtcblx0XHRcdFx0Y3VycmVudCA9IHBhdGgucG9wKCk7XG5cblx0XHRcdFx0aWYgKCBfLmlzTnVtYmVyKCBjdXJyZW50ICkgKSB7XG5cblx0XHRcdFx0XHRpZiAoICRmb2N1c0VsLmlzKCdbZGF0YS10eXBlPVwiZmxleGlibGVfY29udGVudFwiXScpICkge1xuXHRcdFx0XHRcdFx0JGZvY3VzRWwgPSAkZm9jdXNFbC5maW5kKCc+IC5hY2YtaW5wdXQgPiAuYWNmLWZsZXhpYmxlLWNvbnRlbnQgPiAudmFsdWVzJykuY2hpbGRyZW4oJzpub3QoLmFjZi1jbG9uZSknKS5lcShjdXJyZW50KTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCAkZm9jdXNFbC5pcygnW2RhdGEtdHlwZT1cInJlcGVhdGVyXCJdJykgKSB7XG5cdFx0XHRcdFx0XHRjb25zb2xlLmxvZygkZm9jdXNFbC5maW5kKCc+IC5hY2YtaW5wdXQgPiAuYWNmLXJlcGVhdGVyID4gLmFjZi10YWJsZSA+IHRib2R5JykpO1xuXHRcdFx0XHRcdFx0JGZvY3VzRWwgPSAkZm9jdXNFbC5maW5kKCc+IC5hY2YtaW5wdXQgPiAuYWNmLXJlcGVhdGVyID4gLmFjZi10YWJsZSA+IHRib2R5JykuY2hpbGRyZW4oJzpub3QoLmFjZi1jbG9uZSknKS5lcShjdXJyZW50KTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0JGZvY3VzRWwgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0JGZvY3VzRWwgPSAkZm9jdXNFbC5maW5kKCdbZGF0YS1rZXk9XCInK2N1cnJlbnQrJ1wiXScpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggISEgJGZvY3VzRWwgJiYgJGZvY3VzRWwuaXMoJ1tkYXRhLWlkXScpICkge1xuXHRcdFx0XHRcdGV4cGFuZC5wdXNoKCAkZm9jdXNFbCApXG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhICRmb2N1c0VsLmxlbmd0aCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gZm9jdXMgY29udHJvbFxuXHRcdFx0dGhpcy5mb2N1cygpO1xuXG5cdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cdFx0XHRcdC8vIGV4cGFuZCByZXBlYXRhYmxlLCBjb2xsYXBzZSBvdGhlcnNcblx0XHRcdFx0aWYgKCBleHBhbmQubGVuZ3RoICkge1xuXHRcdFx0XHRcdGV4cGFuZFJlcGVhdGFibGVzKCBleHBhbmQgKTtcblx0XHRcdFx0fVxuXG5cblx0XHRcdFx0aWYgKCAhIF8uaXNOdW1iZXIoIGN1cnJlbnQgKSApIHtcblx0XHRcdFx0XHQvLyBmb2N1cyBpbnB1dCAuLlxuXHRcdFx0XHRcdCRmb2N1c0VsLmZpbmQoJ2lucHV0JykuZm9jdXMoKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyAuLi4gb3IgZm9jdXMgcmVwZWF0YWJsZVxuXHRcdFx0XHRcdCRmb2N1c0VsLmF0dHIoJ3RhYmluZGV4JywxKS5mb2N1cygpXG5cdFx0XHRcdH1cblx0XHRcdH0sNTAwKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0fSk7XG5cblx0YWNmLmFkZF9hY3Rpb24oJ3ZhbGlkYXRpb25fc3VjY2VzcycsIGZ1bmN0aW9uKGUpIHtcblx0XHRjdXJyZW50X2NvbnRyb2wudXBkYXRlVmFsdWVzKCk7XG5cdH0pO1xuXHRhY2YuYWRkX2FjdGlvbigndmFsaWRhdGlvbl9mYWlsdXJlJyxmdW5jdGlvbihlKXtcblx0XHQvLyBuZWVkIHRvIHJlbW92ZSBhY2YgbWVzc2FnZSBiZWNhdXNlIGl0IGRpc3BsYXlzIGEgd3JvbmcgbnVtYmVyIG9mIGludmFsaWQgZmllbGRzXG5cdFx0Y3VycmVudF9jb250cm9sLmNvbnRhaW5lci5maW5kKCc+IC5hY2YtZXJyb3ItbWVzc2FnZScpLnJlbW92ZSgpO1xuXHR9KTtcblx0YWNmLmFkZF9hY3Rpb24oJ2ludmFsaWQnLCBmdW5jdGlvbigkaW5wdXQpe1xuXHRcdGFjZi52YWxpZGF0aW9uLmJ1c3kgPSB0cnVlO1xuXHR9KTtcblxuXG5cblx0YXBpLmJpbmQoJ3JlYWR5JyxmdW5jdGlvbigpe1xuXHRcdGFwaS5wcmV2aWV3ZXIuYmluZCggJ2FjZi1jdXN0b21pemUtY29udGV4dCcsIGZ1bmN0aW9uKCBuZXdfdmFsICkge1xuXHRcdFx0dmFyIHByZXZfdmFsO1xuXHRcdFx0cHJldl92YWwgPSBhY2ZfY3VzdG9taXplX2NvbnRleHRcblx0XHRcdGlmICggSlNPTi5zdHJpbmdpZnkobmV3X3ZhbCkgIT0gSlNPTi5zdHJpbmdpZnkocHJldl92YWwpICkge1xuXHRcdFx0XHRhcGkudHJpZ2dlciggJ2FjZi1jdXN0b21pemUtY29udGV4dC1jaGFuZ2VkJywgbmV3X3ZhbCApXG5cdFx0XHR9XG5cdFx0XHRhY2ZfY3VzdG9taXplX2NvbnRleHQgPSBuZXdfdmFsO1xuXG5cdFx0fSk7XG5cblx0XHRhcGkucHJldmlld2VyLmJpbmQoICdmb2N1cy1jb250cm9sLWZvci1zZXR0aW5nJywgZnVuY3Rpb24oIHNldHRpbmdJZCApIHtcblx0XHRcdC8vIGdldCBjbGlja2VkIGZpZWxkIC4uLlxuXHRcdH0pO1xuXG5cblx0XHRhcGkucHJldmlld2VyLmJpbmQoICdhY2YtZm9jdXMnLCBmdW5jdGlvbiggcGF0aCApIHtcblx0XHRcdHZhciBwb3N0X2lkID0gcGF0aC5wb3AoKTtcblxuXHRcdFx0YXBpLmNvbnRyb2wuZWFjaCggZnVuY3Rpb24oIGNvbnRyb2wgKSB7XG5cdFx0XHRcdGlmICggY29udHJvbC5jb25zdHJ1Y3RvciA9PT0gYXBpLkFjZkZpZWxkR3JvdXBDb250cm9sICkge1xuXG5cdFx0XHRcdFx0aWYgKCBfLmlzTnVtYmVyKCBwb3N0X2lkICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICEhIGNvbnRyb2wucHJldmlld19jb250ZXh0ICYmICggY29udHJvbC5wcmV2aWV3X2NvbnRleHQuaWQgPT09IHBvc3RfaWQgKSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb250cm9sLmZvY3VzRmllbGQoIHBhdGggKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0aWYgKCBjb250cm9sLmlkID09PSBwb3N0X2lkICYmIGNvbnRyb2wuZm9jdXNGaWVsZCggcGF0aCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9KTtcblxuXHR9KTtcblxuXG5cdGFwaS5iaW5kKCAnc2F2ZS1yZXF1ZXN0LXBhcmFtcycsIGZ1bmN0aW9uKHF1ZXJ5KXtcblx0XHRfLmV4dGVuZCggcXVlcnksIHsnYWNmX2N1c3RvbWl6ZV9jb250ZXh0JyA6IEpTT04uc3RyaW5naWZ5KCBhY2ZfY3VzdG9taXplX2NvbnRleHQgKX0gKSA7XG5cdH0gKTtcblx0Ly9cblxuIFx0YXBpLmNvbnRyb2xDb25zdHJ1Y3RvclsnYWNmX2N1c3RvbWl6ZXInXSA9IGFwaS5BY2ZGaWVsZEdyb3VwQ29udHJvbDtcblxuXHRhcGkuYmluZCgnY2hhbmdlc2V0LWVycm9yJywgZnVuY3Rpb24oKXtcblx0XHQvL2NvbnNvbGUubG9nKGFyZ3VtZW50cylcblx0fSk7XG5cblxuXG59KSggd3AuY3VzdG9taXplLCBqUXVlcnksIGFjZl9maWVsZGdyb3VwX2NvbnRyb2wgKTtcbiJdfQ==
