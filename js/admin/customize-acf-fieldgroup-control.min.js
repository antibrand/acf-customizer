!function(t,a,i){var e;t.AcfFieldGroupControl=t.Control.extend({initialize:function(i,n){var a;a=n||{},t.Control.prototype.initialize.call(this,i,a)},ready:function(){var a=this;this.setting();this.$wrapper=a.container.find(".acf-fields").first(),acf.do_action("append",a.container),a.load_form(),a.container.on("change",".acf-field",function(i){var n=a.container.find(".acf-field :input");console.log("------change------"),acf.validation.errors=[],n.each(function(){this.checkValidity()}),acf.validation.busy=!1,e=a,acf.validation.fetch(a.container)}),t.Control.prototype.ready.apply(a,arguments)},load_form:function(){var n=this;request=wp.ajax.send("load_customizer_field_group",{data:{section_id:this.id,_nonce:i.load_field_group_nonce}}),request.done(function(i){n.$wrapper.html(i.html),n.$fields=n.container.find(".acf-fields > .acf-field"),n.init_fields()}),request.fail(function(i){}),request.always(function(){request=null})},init_fields:function(){acf.do_action("ready",this.$wrapper)},updateValues:function(){var i,n=this.container.find(".acf-field :input");n.each(function(){var i=a(this).attr("name");i&&(a(this).data("prev-name",i),a(this).attr("name",i.replace(/\[([0-9]+)\]/g,"[_$1]")))}),i=n.serializeJSON({useIntKeysAsArrayIndex:!1}),n.each(function(){a(this).attr("name",a(this).data("prev-name"))}),e.setting.set(i)}}),acf.add_action("validation_success",function(i){e.updateValues()}),acf.add_action("validation_failure",function(i){e.container.find("> .acf-error-message").remove()}),acf.add_action("invalid",function(i){acf.validation.busy=!0}),t.controlConstructor.acf_customizer=t.AcfFieldGroupControl,t.bind("changeset-error",function(){console.log(arguments)})}(wp.customize,jQuery,acf_fieldgroup_control);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
